{"version":3,"sources":["store/actions/recipeActions.js","components/Header.js","components/RecipeCard.js","components/Recipes.js","components/Home.js","components/Recipe.js","components/App.js","serviceWorker.js","store/reducers/recipeReducer.js","store/reducers/index.js","store/index.js","index.js"],"names":["fetchRecipe","recipe","type","payload","Header","className","to","RecipeCard","this","props","id","style","background","image","title","readyInMinutes","servings","Component","settings","dots","infinite","speed","slidesToShow","slidesToScroll","initialSlide","responsive","breakpoint","Recipes","recipes","length","textAlign","map","key","connect","state","recipeReducer","Home","dispatch","Recipe","Axios","get","match","params","then","res","data","catch","error","console","healthScore","extendedIngredients","ingredient","i","amount","unit","originalName","analyzedInstructions","steps","instruction","number","step","paddingTop","App","fetchRecipes","results","path","render","Boolean","window","location","hostname","initState","action","combineReducers","createStore","rootReducer","applyMiddleware","thunk","logger","ReactDOM","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8c0a1ec8.chunk.js","sourcesContent":["export const fetchRecipes = data => ({\n  type: \"FETCH_RECIPES\",\n  payload: data\n});\n\nexport const fetchRecipe = recipe => ({\n  type: \"FETCH_RECIPE\",\n  payload: recipe\n});\n","// PACKAGE\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// STYLES\nimport \"../assets/styles/global.css\";\nimport \"../assets/styles/header.css\";\n\nfunction Header() {\n  return (\n    <header className=\"header\">\n      <div className=\"header-content\">\n        <Link to=\"/\" className=\"logo\">\n          <i className=\"fas fa-home\"></i>\n          <span>Crunch App</span>\n        </Link>\n        <div className=\"search_user\">\n          <i className=\"fas fa-search search\"></i>\n          <i className=\"far fa-user user\"></i>\n        </div>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport \"../assets/styles/global.css\";\nimport \"../assets/styles/recipes.css\";\nimport { Link } from \"react-router-dom\";\n\nclass RecipeCard extends Component {\n  render() {\n    return (\n      <div className=\"recipe\">\n        <Link\n          to={\"/\" + this.props.recipe.id}\n          className=\"photo\"\n          style={{background:\"url(https://spoonacular.com/recipeImages/\"+this.props.recipe.image +\")\"}}\n        ></Link>\n        <div className=\"title\">\n          <Link to={\"/\" + this.props.recipe.id}>{this.props.recipe.title}</Link>\n        </div>\n        <div className=\"details\">\n          <div className=\"readyInMinutes\">\n            <i className=\"far fa-clock orange\"></i>{\" \"}\n            {this.props.recipe.readyInMinutes}<span>mins</span>\n          </div>\n          <div className=\"servings\">\n            <i className=\"fas fa-utensils orange\"></i>{\" \"}\n            {this.props.recipe.servings}{\" \"}\n            {this.props.recipe.servings === 1 ? <span>dish</span> : <span>dishes</span>}\n          </div>\n        </div>\n        <Link className=\"lets-cook-btn\" to={\"/\" + this.props.recipe.id}>\n          Let's Cook!\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default RecipeCard;\n","// PACKAGES\nimport React, { Component } from \"react\";\nimport Slider from \"react-slick\";\nimport { connect } from \"react-redux\";\n\n// COMPONENTS\nimport RecipeCard from \"./RecipeCard\";\n\n// STYLES\nimport \"../assets/styles/global.css\";\nimport \"../assets/styles/recipes.css\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\nconst settings = {\n  dots: true,\n  infinite: true,\n  speed: 500,\n  slidesToShow: 4,\n  slidesToScroll: 1,\n  initialSlide: 0,\n  responsive: [\n    {\n      breakpoint: 1200,\n      settings: {\n        slidesToShow: 3,\n        slidesToScroll: 1,\n        infinite: true,\n        dots: true\n      }\n    },\n    {\n      breakpoint: 900,\n      settings: {\n        slidesToShow: 2,\n        slidesToScroll: 1\n      }\n    },\n    {\n      breakpoint: 600,\n      settings: {\n        slidesToShow: 1,\n        slidesToScroll: 1\n      }\n    }\n  ]\n};\n\nclass Recipes extends Component {\n  render() {\n    return (\n      <div className=\"recipes-wrapper\">\n        <h2>Recipes</h2>\n        <div className=\"recipes\">\n          {this.props.recipes.length === 0 ? (\n            <div style={{ textAlign: \"center\" }}>\n              <div className=\"loader\">Loading...</div>\n              <h2>Loading...</h2>\n            </div>\n          ) : (\n            <Slider {...settings}>\n              {this.props.recipes.map(recipe => (\n                <RecipeCard key={recipe.id} recipe={recipe} />\n              ))}\n            </Slider>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  recipes: state.recipeReducer.recipes\n});\n\nexport default connect(mapStateToProps)(Recipes);\n","// PACKAGES\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\n// REDUX\nimport { fetchRecipe } from \"../store/actions/recipeActions\";\n\n// COMPONENTS\nimport Header from \"./Header\";\nimport Recipes from \"./Recipes\";\n\nclass Home extends Component {\n  componentDidMount() {\n    this.props.fetchRecipe(null);\n  }\n\n  render() {\n    return (\n      <>\n        <Header />\n        <Recipes />\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  fetchRecipe: recipe => dispatch(fetchRecipe(recipe))\n});\n\nexport default connect(null, mapDispatchToProps)(Home);\n","import React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport { connect } from \"react-redux\";\nimport { fetchRecipe } from \"../store/actions/recipeActions\";\nimport \"../assets/styles/global.css\";\nimport \"../assets/styles/recipe.css\";\nimport Axios from \"axios\";\n\nclass Recipe extends Component {\n  componentDidMount() {\n    Axios.get(\n      \"https://api.spoonacular.com/recipes/\" +\n        this.props.match.params.id +\n        \"/information?apiKey=a8a78069d78b4d5d99564bbf6316dced\"\n    )\n      .then(res => this.props.fetchRecipe(res.data))\n      .catch(error => console.error(error));\n  }\n\n  render() {\n    return (\n      <>\n        <Header />\n        {this.props.recipe ? (\n          <div className=\"single-recipe-wrapper\">\n            <div className=\"single-recipe\">\n            {/* LEFT SIDE */}\n              <div className=\"left-side\">\n                <h1 className=\"recipe-title\">{this.props.recipe.title}</h1>\n                <div className=\"photo\" style={{background: \"url(\" + this.props.recipe.image + \")\"}}></div>\n                <div className=\"description\">\n                  <p>You can prepare this meal in <span className=\"orange\">{this.props.recipe.readyInMinutes}</span> minutes.</p>\n                  <p>Once done, you will be able to enjoy <span className=\"orange\">{this.props.recipe.servings}</span> beautiful servings.</p>\n                  <p>The Health Score of the meal is <span className=\"orange\">{this.props.recipe.healthScore}</span>.</p>\n                </div>\n              </div>\n              {/* RIGHT SIDE */}\n              <div className=\"right-side\">\n                <div className=\"right-side-section\">\n                  <h2 className=\"ingredients-title\">Ingredients</h2>\n                  <div className=\"ingredients\">\n                    {this.props.recipe.extendedIngredients.map((ingredient, i) => (\n                      <p key={i}>\n                        <span className=\"orange\">{ingredient.amount} {ingredient.unit}</span>{\" \"}\n                        <span>{ingredient.originalName}</span>\n                      </p>))}\n                  </div>\n                </div>\n                <div className=\"right-side-section\">\n                  <h2 className=\"instructions-title\">How to make it</h2>\n                  <div className=\"instructions\">\n                    {this.props.recipe.analyzedInstructions[0].steps.map((instruction, i) => (\n                      <p key={i}>\n                        <span className=\"orange\">{instruction.number}. </span>\n                        <span>{instruction.step}</span>\n                      </p>))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div style={{ textAlign: \"center\", paddingTop: 120 }}>\n            <div className=\"loader\">Loading...</div>\n            <h2>Loading...</h2>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  recipes: state.recipeReducer.recipes,\n  recipe: state.recipeReducer.recipe\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchRecipe: recipe => dispatch(fetchRecipe(recipe))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Recipe);\n","// PACKAGES\nimport React, { Component } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Axios from \"axios\";\n\n// COMPONENTS\nimport Home from \"./Home\";\nimport Recipe from \"./Recipe\";\n\n// REDUX\nimport { fetchRecipes } from \"../store/actions/recipeActions\";\n\n// STYLES\nimport \"../assets/styles/global.css\";\n\nclass App extends Component {\n  componentDidMount() {\n    Axios.get(\"https://api.spoonacular.com/recipes/search?query=burger&number=10&apiKey=a8a78069d78b4d5d99564bbf6316dced\")\n      .then(res => this.props.fetchRecipes(res.data.results))\n      .catch(error => console.error(error));\n  }\n\n  render() {\n    return (\n      <Switch>\n        <Route path=\"/:id\" render={props => <Recipe {...props} />} />\n        <Route path=\"/\" render={() => <Home />} />\n      </Switch>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  fetchRecipes: recipes => dispatch(fetchRecipes(recipes))\n});\n\nexport default connect(null, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\n  recipes: [],\n  recipe: null\n};\n\nconst recipeReducer = (state = initState, action) => {\n  switch (action.type) {\n    case \"FETCH_RECIPES\":\n      return {\n        ...state,\n        recipes: action.payload\n      };\n\n    case \"FETCH_RECIPE\":\n      return {\n        ...state,\n        recipe: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default recipeReducer;\n","import { combineReducers } from 'redux';\nimport recipeReducer from './recipeReducer';\n\nexport default combineReducers({\n  recipeReducer\n})","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from './reducers/index';\nimport logger from \"redux-logger\";\n\nexport default createStore(rootReducer, applyMiddleware(thunk, logger));","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}